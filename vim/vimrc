" Load bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

"" ========================================================================
"" Editor Settings
"" ========================================================================

" Set leader key
let mapleader=","
"" Make grep use ack instead
set grepprg=ack\ --nogroup\ --column\ $*
set grepformat=%f:%l:%c:%m
set runtimepath^=~/.vim/bundle/ctrlp.vim
"Always display status line
set laststatus=2
" Default Code Folding Settings
set foldenable
""Fold based on indent
set foldmethod=indent
" Display settings
" Highlight > 81 character range
let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(120,999),",")
"Set gutter background to black
highlight SignColumn ctermbg=232
" Highlight the status line
highlight StatusLine ctermfg=blue ctermbg=yellow
"Set syntax on by default
syntax on
filetype plugin indent on
"Favourite Colorsheme
colorscheme gotham
" Highlight current line
set cursorline
"Show line numberv
set number
"Set relative number by default
set relativenumber
"Wrap lines at convenient points
set linebreak
" I prefer using dark background while writing code
set background=dark
"Enable Highlight Search
set hlsearch
"Highligt while search
set incsearch
"Case Insensitivite Pattern Matching
set ignorecase
"Overrides ignorecase if pattern contains upcase
set smartcase
" Keep at least 4 lines below cursor
set scrolloff=10
"Make 'tab' insert indents instead of tabs at the beginning of a line
set smarttab
"Size of a hard tabstop
set tabstop=2
"Size of an 'indent'
set shiftwidth=2
" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
set softtabstop=0
""Converting tabs to spaces
set et|retab
" Smart Indent
set smartindent
" Display extra whitespace
set list listchars=tab:»·,trail:·
"Keep 500 lines of command line history
set history=500
"Show the cursor position all the time
set ruler
"Make the backspace work like in most other programs
set backspace=2
"Use the OS clipboard by default
set clipboard=unnamed
"Set keypress timeout
set timeoutlen=500
"When at 3 spaces, hit >> to go to 4, not 5.
set shiftround
"Don't redraw screen when running macros.
set lazyredraw
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Optimize for fast terminal connections
set ttyfast
" Don’t add empty newlines at the end of files
set binary
set noeol
" Show matching brackets.
set showmatch
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Turn Off Swap Files, Backup ..
set noswapfile
set nobackup
set nowb
" Autocomplete with dictionary words when spell check is on
set complete+=kspell
" Always use vertical diffs
set diffopt+=vertical
" Automatically :write before running commands
set autowrite
" Windows Split
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Prevent using arrow key
" nnoremap <Left>  :echoe "Use h"<CR>
" nnoremap <Right> :echoe "Use l"<CR>
" nnoremap <Up>    :echoe "Use k"<CR>
" nnoremap <Down>  :echoe "Use j"<CR>

"" ========================================================================
"" Plugin Settings
"" ========================================================================

" SimpleFold
let g:SimpylFold_docstring_preview = 1

"Gundo
nnoremap <F8> :GundoToggle<CR>
let g:gundo_width = 60
let g:gundo_preview_height = 40
let g:gundo_right = 1

" Syntasitc
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_html_tidy_exec = 'tidy5'

" CtrP Search
" Remove limit files to search
let g:ctrlp_max_files=0
" Easy Motion
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
" Easy Align
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"Better Whitespace Settings
highlight ExtraWhitespace ctermbg=red
nmap <leader>tw  :ToggleWhitespace<CR>
nmap <leader>fw  :StripWhitespace<CR>

" XtermColorTable
nmap <silent> <S-c> :XtermColorTable<CR>

" NERDTree
" Mapp Ctrl t to toggle NERDTree
nmap <silent> <C-t> :NERDTreeToggle<CR>
" Mapp Shift F to show file in NERDTree
nmap <silent> <S-f> :NERDTreeFind<CR>

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('haml', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('rb', 'Magenta', 'none', '#ff00ff', '#151515')


" Mapp Ctrl b to toggle BuffergatorToggle
nmap <silent> <C-b> :BuffergatorToggle<CR>
" Remove Sarch Hightlight
nmap <silent> <S-h> :nohl<CR>

" Indent Guide
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size  = 1
hi IndentGuidesOdd  ctermbg=0
hi IndentGuidesEven ctermbg=232
nmap <silent> <Leader>l <Plug>IndentGuidesToggle

" Gitgutter Settings
let g:gitgutter_enabled            = 1
let g:gitgutter_signs              = 1
let g:gitgutter_highlight_lines    = 0
let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime           = 0
let g:gitgutter_eager              = 0
let g:gitgutter_max_signs          = 500

"WebDevIcons
set encoding=utf-8
set guifont=Inconsolata\ for\ Powerline\ Plus\ Nerd\ File\ Types:h11
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = 'ƛ'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:webdevicons_enable_nerdtree = 1

" Light Line Settings
let g:lightline = {
  \ 'colorscheme': 'powerline',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
    \   'filetype': 'MyFiletype',
    \   'fileformat': 'MyFileformat',
    \   'fugitive': 'LightLineFugitive',
    \   'readonly': 'LightLineReadonly',
    \   'modified': 'LightLineModified',
    \   'filename': 'LightLineFilename'
    \ },
  \ 'component_visible_condition': {
    \   'fugitive': 'LightLineFugitive',
    \   'readonly': 'LightLineReadonly',
    \   'modified': 'LightLineModified'
  \ },
  \ 'separator': { 'left': '⮀', 'right': '⮂' },
  \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
  \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤"
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠ '._ : ''
  endif
  return ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction


" Minimap by default
map <leader>mm :Minimap <CR>
map <leader>mc :MinimapClose <CR>
" let g:minimap_highlight='Visual'

" Use Vim Multiple Cursor default mapping
let g:multi_cursor_use_default_mapping=1
" Default highlighting (see help :highlight and help :highlight-link)
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual

"" ========================================================================
"" Rails Shortcuts 
"" ========================================================================
map <Leader>vm :Vmodel<cr>
map <Leader>vv :Vview<cr>


"" ========================================================================
"" Custom Shortcuts
"" ========================================================================

"CTags
nnoremap <F5> :!ctags -R<CR>


" Quick Save
nmap <silent> <S-s> :w!<CR>
" Quickly reload .vimrc
map <leader>sv :source ~/.vimrc<CR>
" Quickly open .vimrc in new tab
map <leader>ov :tabedit ~/.vimrc<CR>
" Quickly open .vimrc.bundles in new tab
map <leader>ovb :tabedit ~/.vimrc.bundles<CR>
" Copy all content of a file
map <leader>co ggVG"*y
" Toggle Relative Number
nnoremap <silent> <leader>nb :set relativenumber!<CR>
" Toggle Wrap Text
nnoremap <silent> <leader>w :set wrap!<CR>
" Toggle Paste
nnoremap <silent> <leader>p :set paste!<CR>

"" ========================================================================
"" Custom Functions
"" ========================================================================

" Automatic commands
if has("autocmd")
  " Enable file type detection
  filetype on
  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
  " Treat .md files as Markdown
  autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell
  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell
  " Remember last position in file
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
endif
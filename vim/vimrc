" Load Vim bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

syntax on          " Set syntax on by default
colorscheme gotham " Favourite Colorsheme

" Keymapping
" ------------------------------------------------------------------------- {{{

" Set leader key
let mapleader=","

" Custom Shortcuts
" ------------------------------------------------------------------------- {{{

" Quickly reload .vimrc
map <leader>vr :source ~/.vimrc<CR>

" Quickly open .vimrc in new tab
map <leader>vc :tabedit ~/.vimrc<CR>

" Quickly open .vimrc.bundles in new tab
map <leader>vb :tabedit ~/.vimrc.bundles<CR>

" Quick Save
nmap <silent> <S-s> :w!<CR>

" Remove Sarch Hightlight
nmap <silent> <S-h> :nohl<CR>

" Toggle Relative Number
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Toggle Wrap Text
nnoremap <silent> <leader>w :set wrap!<CR>

" Toggle Paste
nnoremap <silent> <leader>p :set paste!<CR>

" CTags
nnoremap <F5> :!ctags -R<CR>

" General Settings
" ------------------------------------------------------------------------- {{{
set history=500       " Keep 500 lines of command line history
set ruler             " Show the cursor position all the time
set backspace=2       " Make the backspace work like in most other programs
set clipboard=unnamed " Use the OS clipboard by default
set timeoutlen=500    " Set keypress timeout
set shiftround        " When at 3 spaces, hit >> to go to 4, not 5.
set lazyredraw        " Don't redraw screen when running macros.
set esckeys           " Allow cursor keys in insert mode
set ttyfast           " Optimize for fast terminal connections
set binary            " Don’t add empty newlines at the end of files
set showmatch         " Show matching brackets.
set noerrorbells      " Disable error bells
set nostartofline     " Don’t reset cursor to start of line when moving around.
set diffopt+=vertical " Always use vertical diffs
set autowrite         " Automatically :write before running commands
set scrolloff=10      " Keep at least 10 lines below cursor
set shortmess=atI     " Don’t show the intro message when starting Vim
set showmode          " Show the current mode
set noeol             " No end of line
set title             " Show the filename in the window titlebar
set noswapfile        " Stop vim from creating automatic backup ..
set nobackup
set nowb

" Presentation
" ------------------------------------------------------------------------- {{{
set cursorline      " Highlight current line
set number          " Show line number
set relativenumber  " Set relative number by default
set linebreak       " Wrap lines at convenient points
set wrap            " Wrap text.
set textwidth=81    " Maximum line width before wrapping.
set background=dark " I prefer using dark background while writing code
set laststatus=2    " Always display status line
set smartindent     " Smart Indent

" Whitespace
" ------------------------------------------------------------------------- {{{
set selection=old " Do not select the end of line.
set expandtab     " Expand tabs into spaces.
set tabstop=2     " Set tab to equal 2 spaces.
set softtabstop=2 " Set soft tabs equal to 2 spaces.
set shiftwidth=2  " Set auto indent spacing.
set shiftround    " Shift to the next round tab stop.
set smarttab      " Insert spaces in front of lines.

" Search & Navigation
" ------------------------------------------------------------------------- {{{
set hlsearch                             " Enable Highlight Search
set incsearch                            " Highligt while search
set ignorecase                           " Case Insensitivite Pattern Matching
set smartcase                            " Overrides ignorecase if pattern contains upcase
set grepprg=ack\ --nogroup\ --column\ $* " Make grep use ack instead
set grepformat=%f:%l:%c:%m

" Invisible Characters
" ------------------------------------------------------------------------- {{{
set nolist " Do not show invisible characters.
set listchars=tab:▸\ ,eol:¬,trail:⌴,extends:❯,precedes:❮ " List of characters to show instead of whitespace.

" Folding
" ------------------------------------------------------------------------- {{{
"set nofoldenable      " Disable folding
set foldenable        " Enable folding.
set foldmethod=indent " Syntax dictates folding.
set foldlevel=0       " Use a one level fold.
set foldnestmax=2     " Do not nest more than 2 folds.
set viewoptions=folds " Remember folds

" Autocomplete
" ------------------------------------------------------------------------- {{{
set complete+=kspell " Autocomplete with dictionary words when spell check is on
set wildmenu         " Enhance command-line completion
set wildchar=<Tab>   " Enable completion on tab.

" Windows Mangements
" ------------------------------------------------------------------------- {{{

" Windows Split
set winwidth=60
set winheight=20
set winminheight=20
set winheight=999

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

filetype plugin indent on

" Highlight > 81 character range
let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(120,999),",")


" Better Whitespace Settings
highlight ExtraWhitespace ctermbg=red
nmap <leader>tw  :ToggleWhitespace<CR>
nmap <leader>fw  :StripWhitespace<CR>

" Tab Navigation
" ------------------------------------------------------------------------- {{{

map <Leader>tt :tabnew<CR>          " Easily create a new tab.
map <Leader>tc :tabclose<CR>        " Easily close a tab.
noremap <Leader>tm :tabmove<CR>     " Easily move a tab.
noremap <Leader>tn :tabnext<CR>     " Easily go to next tab.
noremap <Leader>tp :tabprevious<CR> " Easily go to previous tab.


" Auto Command
" ------------------------------------------------------------------------- {{{
if has("autocmd")
  " Enable file type detection
  filetype on
	au BufWinLeave * silent! mkview
	au BufWinEnter * silent! loadview

	" Resize splits when the window is resized.
	au VimResized * exe "normal! \<c-w>="

	" Strip trailing whitespace.
	au BufWritePre,FileWritePre,FileAppendPre,FilterWritePre *
			\ call StripTrailingWhitespace()

  " Treat .json files as .js
  au BufNewFile,BufRead *.json setfiletype json syntax=javascript

  " Automatically wrap at 80 characters for Markdown
  au BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  au FileType gitcommit setlocal textwidth=72
  au FileType gitcommit setlocal spell

  " Remember last position in file
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Allow stylesheets to autocomplete hyphenated words
  au FileType css,scss,sass setlocal iskeyword+=-

  " Code Folding
  " ------------------------------------- {{{
  " In order for SimpylFold to be properly loaded in certain cases
  autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
  autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<

  " Mardown Settings
  " ------------------------------------- {{{

  " Sppellchecking for Markdown
  "au FileType markdown setlocal spell

  " Treat .md files as Markdown
  au BufNewFile,BufRead *.md setlocal filetype=markdown

  " Parse content between the ---s as comment. Make YML files look better
  au BufNewFile,BufRead,BufWrite *.md syntax match Comment /\%^---\_.\{-}---$/

  " Set Markdown Textwidth
  au FileType markdown setlocal textwidth=100

  " Fenced-in Languages
  let g:markdown_fenced_languages = ['javascript', 'ruby', 'sh', 'yaml', 'javascript', 'html', 'vim', 'coffee', 'json', 'diff']

endif


" Mouse Settings
" ------------------------------------------------------------------------- {{{
if has('mouse')
  set mouse=a " Enable mouse everywhere.
  set mousemodel=popup_setpos  " Show a pop-up for right-click.
  set mousehide " Hide mouse while typing.
endif

" Plugin Settings
" ------------------------------------------------------------------------- {{{

"Vim Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
highlight SignColumn ctermbg=232 "Set gutter background to black
highlight StatusLine ctermfg=blue ctermbg=yellow "Highlight the status line

" UltiSnips Trigger configuration.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Goyo - Distraction Free Writing
nmap <Leader>/ :Goyo<CR>

" Minimap
" ------------------------------------ {{{
let g:minimap_highlight='Visual'

" CtrP Search
" ------------------------------------ {{{

" Remove limit files to search
let g:ctrlp_max_files=0
" Filtering garbage out of CtrlP
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|^.git$\|_site'

" Bufferline
" ------------------------------------ {{{

let g:bufferline_echo = 1                  " Denotes whether bufferline should automatically echo to the command bar
let g:bufferline_active_buffer_left = '['  " The separator used on the left side of a buffer
let g:bufferline_active_buffer_right = ']' " The separator used on the right side of a buffer
let g:bufferline_modified = '+'            " The symbol to denote that a buffer is modified
let g:bufferline_show_bufnr = 1            " Denotes whether buffer numbers should be displayed
let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree', 'startify'] " Better Line Number

" SimpylFold
" ------------------------------------ {{{
" Enable previewing of your folded classes' and functions'
let g:SimpylFold_docstring_preview = 1

" Enable/Disable SimpylFold
let g:SimpylFold_fold_docstring = 0

" Syntasitc
" ------------------------------------ {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_html_tidy_exec = 'tidy5'

" Easy Motion
" ------------------------------------ {{{
" Replace default Vim search with EasyMotion n-character search motion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1        " This setting makes EasyMotion work similarly to Vim's smartcase option for global searches
let g:EasyMotion_use_smartsign_us = 1 " With this option set, v will match both v and V, but V will match V only. Default: 0. Works with US layout

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" 2-character search motion
nmap <Leader><Leader>s <Plug>(easymotion-s2)
nmap <Leader><Leader>t <Plug>(easymotion-t2)

" Within line motion
" Every motion also has variants that are restricted to just the current line
" This can be helpful if you find the full search distracting or slows down vim.
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

" Easy Align
" ------------------------------------ {{{
""Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" XtermColorTable
nmap <silent> <S-c> :XtermColorTable<CR>

" NERDTree
" ------------------------------------ {{{
let g:NERDTreeWinSize = 25 " Set NERDTree Windows Size
nmap <silent> <C-t> :NERDTreeToggle<CR> " Mapp Ctrl t to toggle NERDTree
nmap <silent> <S-f> :NERDTreeFind<CR> " Mapp Shift F to show file in NERDTree

" NERDTress File highlighting
" ------------------------------------ {{{
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('haml', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('rb', 'Magenta', 'none', '#ff00ff', '#151515')

" Indent Guide
" ------------------------------------ {{{
let g:indent_guides_auto_colors = 1
let g:indent_guides_guide_size  = 1
let g:indent_guides_start_level = 2
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=green
nmap <silent> <Leader>l <Plug>IndentGuidesToggle

" Gitgutter Settings
" ------------------------------------ {{{
let g:gitgutter_enabled            = 1
let g:gitgutter_signs              = 1
let g:gitgutter_highlight_lines    = 0
let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime           = 0
let g:gitgutter_eager              = 0
let g:gitgutter_max_signs          = 500

" Rainbow Parenthesis
" ------------------------------------ {{{
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" Custom Functions
" ------------------------------------------------------------------------- {{{
function! StripTrailingWhitespace()
    if !&binary && &modifiable && &filetype != 'diff'
        let l:winview = winsaveview()
        %s/\s\+$//e
        let @/=''
        call winrestview(l:winview)
    endif
endfunction
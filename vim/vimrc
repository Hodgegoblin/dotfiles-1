 " Quoc Hung Le's .vimrc

" General {{{
" Load Plugins
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

filetype indent on
filetype plugin on
syntax on                           " Set syntax on by default
set autoindent                      " Auto indent
set background=dark                 " Using dark background while writing code
set termguicolors                   " Using True Colors
colorscheme onedark                 " A dark Vim color scheme inspired by Atom's One Dark syntax theme.
let g:onedark_terminal_italics = 1  " Enable using italic character

" Enable using true color in Neovim
" For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

set history=500       " Keep 500 lines of command line history
set ruler             " Show the cursor position all the time
set backspace=2       " Make the backspace work like in most other programs
set clipboard=unnamed " Use the OS clipboard by default
set timeoutlen=500    " Set keypress timeout
set shiftround        " When at 3 spaces, hit >> to go to 4, not 5.
set lazyredraw        " Don't redraw screen when running macros.
set esckeys           " Allow cursor keys in insert mode
set ttyfast           " Optimize for fast terminal connections
set binary            " Don’t add empty newlines at the end of files
set showmatch         " Show matching brackets.
set noerrorbells      " Disable error bells
set nostartofline     " Don’t reset cursor to start of line when moving around.
set diffopt+=vertical " Always use vertical diffs
set autowrite         " Automatically :write before running commands
set scrolloff=10      " Keep at least 10 lines below cursor
set shortmess=atI     " Don’t show the intro message when starting Vim
set showmode          " Show the current mode
set noeol             " No end of line
set title             " Show the filename in the window titlebar
set showcmd           " Show command in bottom bar
set noswapfile        " Stop vim from creating automatic backup ..
set novisualbell      " Do not show visual bell
set nobackup          " Do not backup
set nowb
"
" }}}
"
" Presentation {{{
set cursorline      " Highlight current line
set number          " Show line number
set numberwidth=5   " Number column width
set relativenumber  " Set relative number by default
set linebreak       " Wrap lines at convenient points
set wrap            " Wrap text.
set textwidth=81    " Maximum line width before wrapping.
set laststatus=2    " Always display status line
set smartindent     " Smart Indent
set showbreak=a     " Set break character

" Invisible Characters
set list                                                 " Show invisible characters.
set listchars=tab:▸\ ,eol:↵,trail:⌴,extends:❯,precedes:❮ " List of characters to show instead of whitespace.
"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey ctermfg=5

" Highlight > 81 character range
let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(120,999),",")

" Highlight SignColum (Gutter)
hi SignColumn ctermfg=118 ctermbg=NONE
hi SignColumn guifg=#000000 guibg=NONE

" Highlight Fold Column
hi FoldColumn ctermfg=red ctermbg=black
hi FoldColumn guifg=#628db8 guibg=black


" Highlight the status line
hi StatusLine   ctermfg=darkblue ctermbg=black
hi StatusLine   ctermfg=darkblue ctermbg=black

" Highlight Wildmenu Selected Item
hi WildMenu     ctermfg=white ctermbg=darkblue
hi WildMenu     guifg=white guibg=#6b9c6e


" Set Line Number Width
set nuw=3

" Set Fold Column Width
set foldcolumn=1
highlight Folded ctermbg=blue ctermfg=white
highlight Folded guibg=#628db8 guifg=white

" Line highlights
hi GitGutterAdd ctermfg=green ctermbg=NONE
hi GitGutterAdd guifg=#6b9c6e guibg=NONE
"GitGutterAddLine          " default: links to DiffAdd
"GitGutterChangeLine       " default: links to DiffChange
"GitGutterDeleteLine       " default: links to DiffDelete
"GitGutterChangeDeleteLine " default: links to GitGutterChangeLineDefault, i.e. DiffChange
" }}}
"
" Whitespace {{{
set selection=old " Do not select the end of line.
set expandtab     " Expand tabs into spaces.
set tabstop=2     " Set tab to equal 2 spaces.
set softtabstop=2 " Set soft tabs equal to 2 spaces.
set shiftwidth=2  " Set auto indent spacing.
set shiftround    " Shift to the next round tab stop.
set smarttab      " Insert spaces in front of lines.
set nojoinspaces  " Use one space, not two, after punctuation.
" Better Whitespace Settings
highlight ExtraWhitespace ctermbg=red guibg=#C80000
nmap <leader>tw  :ToggleWhitespace<CR>
nmap <leader>cw  :StripWhitespace<CR>
" }}}

" Keymapping {{{
" Set leader key
let mapleader=","

" Use HJKL instead of arrow keys
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>

" Quickly reload .vimrc
map <leader>vr :source ~/.vimrc<CR>

" Quickly open .vimrc in new tab
map <leader>vc :tabedit ~/.vimrc<CR>

" Quickly open .vimrc.bundles in new tab
map <leader>vb :tabedit ~/.vimrc.bundles<CR>

" Quickly open .tmux.conf in new tab
map <leader>mx :tabedit ~/.tmux.conf<CR>

" Quick Save
nmap <silent> <S-s> :w!<CR>

" Saves the file (handling the permission-denied error)
cmap w!! w !sudo tee % >/dev/null

" Remove Sarch Hightlight
nmap <silent> <S-h> :nohl<CR>

" Toggle Relative Number
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Toggle Wrap Text
nnoremap <silent> <leader>w :set wrap!<CR>

" Toggle Paste
nnoremap <silent> <leader>p :set paste!<CR>

" CTags
nnoremap <F5> :!ctags -R<CR>

" move to beginning/end of line
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

" }}}
"
" Tab Navigation {{{
map <Leader>tn :tabnew<CR>          " Easily create a new tab.
map <Leader>tc :tabclose<CR>        " Easily close a tab.
noremap <Leader>tm :tabmove<CR>     " Easily move a tab.
noremap <Leader>tn :tabnext<CR>     " Easily go to next tab.
noremap <Leader>tp :tabprevious<CR> " Easily go to previous tab.

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" }}}
"
" UI Layouts & Windows Management {{{
" Windows Managements
" Windows Split
" set winwidth=60
" set winheight=40
" :silent! set winminheight=20

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Move between splits faster without the prefix key
" Use ctrl-[hjkl] to select the active split!
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Make tmux navigator works in NeoVim
" https://github.com/christoomey/vim-tmux-navigator#it-doesnt-work-in-neovim-specifically-c-h
" A more complete and less-hacky solution would be to update the incorrect
" terminfo entry that is part of the problem on OS X (and some Linux
" distributions) as described in this comment: https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
" }}}
"
" Search {{{
set hlsearch                             " Enable Highlight Search
set incsearch                            " Highlight while search
set ignorecase                           " Case Insensitivity Pattern Matching
set smartcase                            " Overrides ignorecase if pattern contains upcase
set grepprg=ack\ --nogroup\ --column\ $* " Make grep use ack instead
set grepformat=%f:%l:%c:%m
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
" }}}
"
" Foldings {{{
" Space open/closes folds
nnoremap <space> za
set foldenable        " Enable folding.
set foldmethod=indent " Syntax dictates folding.
set foldnestmax=5     " Do not nest more than 5 folds.
set foldlevelstart=10 " Open most folds by default
set viewoptions=folds " Remember folds
" }}}
"
" Misc {{{
" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Pressing ,ss will toggle spell checking
map <leader>ss :setlocal spell!<cr>

" Mouse Settings
if has('mouse')
  set mouse=a " Enable mouse everywhere.
  set mousemodel=popup_setpos  " Show a pop-up for right-click.
  set mousehide " Hide mouse while typing.
endif

" Wildmenu Settings
set wildmenu         " Enhance command-line completion
set wildignorecase   " Ignore casing
set wildchar=<Tab>   " Enable completion on tab.

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" }}}
"
" Autocommand {{{
if has("autocmd")
  " Enable file type detection
  filetype on
	au BufWinLeave * silent! mkview
	au BufWinEnter * silent! loadview

	" Resize splits when the window is resized.
	au VimResized * exe "normal! \<c-w>="

	" Strip trailing whitespace.
	au BufWritePre,FileWritePre,FileAppendPre,FilterWritePre *
			\ call StripTrailingWhitespace()

  " Treat .json files as .js
  au BufNewFile,BufRead *.json setfiletype json syntax=javascript

  " Automatically wrap at 80 characters for Markdown
  au BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  au FileType gitcommit setlocal textwidth=72
  au FileType gitcommit setlocal spell

  " Remember last position in file
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Allow stylesheets to autocomplete hyphenated words
  au FileType css,scss,sass setlocal iskeyword+=-

  " Code Folding
  " In order for SimpylFold to be properly loaded in certain cases
  autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
  autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<

  " Load EE Snippets
  autocmd FileType html UltiSnipsAddFiletypes html-ee

  " Mardown Settings

  " Sppellchecking for Markdown
  "au FileType markdown setlocal spell

  " Treat .md files as Markdown
  au BufNewFile,BufRead *.md setlocal filetype=markdown

  " Parse content between the ---s as comment. Make YML files look better
  au BufNewFile,BufRead,BufWrite *.md syntax match Comment /\%^---\_.\{-}---$/

  " Set Markdown Textwidth
  au FileType markdown setlocal textwidth=100

  " Fenced-in Languages
  let g:markdown_fenced_languages = ['javascript', 'ruby', 'sh', 'yaml', 'javascript', 'html', 'vim', 'coffee', 'json', 'diff']

  " Map bc to run CSScomb. bc stands for beautify css
  autocmd FileType css noremap <buffer> <leader>bc :CSScomb<CR>

  " Automatically reload vimrc when it's saved
  " au BufWritePost .vimrc so ~/.vimrc

endif
" }}}
"
" Plugin Settings {{{
" }}}

"Vim Airline {{{
let g:airline_powerline_fonts = 1                 " Enable using powerline font
let g:airline#extensions#tabline#enabled = 1      " Enable Tab line
let g:airline#extensions#tabline#show_buffers = 0 " Do not show buffer in tab bar
let g:airline#extensions#tabline#fnamemod = ':t'  " Show just the filename
let g:airline_theme='onedark'
" }}}

" UltiSnips Trigger configuration.{{{
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" }}}


" Gundo - Undo tree
" nnoremap <F5> :GundoToggle<CR>

" Goyo - Distraction Free Writing {{{
nmap <Leader>/ :Goyo<CR>
" }}}

" Minimap {{{
let g:minimap_highlight='Visual'  " Highlight current section
" }}}

" CtrlP Search {{{
let g:ctrlp_max_files=0                                               " Remove limit files to search
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|^.git$\'         " Filtering garbage out of CtrlP
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10' " Order matching files from bottom to top, limit 10 results
let g:ctrlp_switch_buffer = 0                                         " Always open files in new buffers
let g:ctrlp_working_path_mode = 0                                     " Change the working directory during a Vim session
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'        " Make CtrlP use Ag (The Silver Searcher) search engine for better performance(faster)
" }}}

" Bufferline {{{
let g:bufferline_echo = 1                  " Denotes whether bufferline should automatically echo to the command bar
let g:bufferline_active_buffer_left = '['  " The separator used on the left side of a buffer
let g:bufferline_active_buffer_right = ']' " The separator used on the right side of a buffer
let g:bufferline_modified = '+'            " The symbol to denote that a buffer is modified
let g:bufferline_show_bufnr = 1            " Denotes whether buffer numbers should be displayed
let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree', 'startify'] " Better Line Number
" }}}

" SimpylFold {{{
" Enable previewing of your folded classes' and functions'
let g:SimpylFold_docstring_preview = 1

" Enable/Disable SimpylFold
let g:SimpylFold_fold_docstring = 0
" }}}

" Syntasitc {{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_html_tidy_exec = 'tidy5'
" }}}

" Easy Motion {{{
" Replace default Vim search with EasyMotion n-character search motion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1        " This setting makes EasyMotion work similarly to Vim's smartcase option for global searches
let g:EasyMotion_use_smartsign_us = 1 " With this option set, v will match both v and V, but V will match V only. Default: 0. Works with US layout

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" 2-character search motion
nmap <Leader><Leader>s <Plug>(easymotion-s2)
nmap <Leader><Leader>t <Plug>(easymotion-t2)

" Within line motion
" Every motion also has variants that are restricted to just the current line
" This can be helpful if you find the full search distracting or slows down vim.
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" }}}

" Easy Align {{{
 " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" NERDTree {{{
let g:NERDTreeWinSize = 35 " Set NERDTree Windows Size
nmap <Leader>t :NERDTreeToggle<CR> " Mapp Ctrl t to toggle NERDTree
nmap <Leader>f :NERDTreeFind<CR>   " Mapp Shift F to show file in NERDTree
" }}}

" NERDTree Tabs {{{
let g:nerdtree_tabs_open_on_console_startup = 0 " Run NERDTreeTabs on console vim startup
let g:nerdtree_tabs_autoclose = 0               " Do not close current tab if there is only one window in it and it's NERDTree
let g:nerdtree_tabs_autofind = 0                " Automatically find and select currently opened file in NERDTree.
" }}}

" NERDTress File highlighting {{{
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" HTML
call NERDTreeHighlightFile('jade', 'green', 'none', '#719c6e', 'none')
call NERDTreeHighlightFile('html', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('haml', 'green', 'none', '#719c6e', 'none')

" Shell
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', 'none')

" Programming Languages
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', 'none')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', 'none')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', 'none')
call NERDTreeHighlightFile('rb', 'Magenta', 'none', '#ff00ff', 'none')

" Systems
call NERDTreeHighlightFile('ini', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('config', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('conf', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('yml', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', 'none')

" Text
call NERDTreeHighlightFile('json', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', 'none')

" CSS
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', 'none')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', 'none')
" }}}

" Nerd Commenter {{{
let g:NERDSpaceDelims = 1            " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs = 1        " Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left'      " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDAltDelims_java = 1         " Set a language to use its alternate delimiters by default
let g:NERDCommentEmptyLines = 1      " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } } " Add your own custom formats or override the defaults
" }}}
"
" Indent Guide {{{
let g:indent_guides_auto_colors = 1
let g:indent_guides_guide_size  = 1
let g:indent_guides_start_level = 2
hi IndentGuidesOdd  ctermbg=black guibg=black
hi IndentGuidesEven ctermbg=green guibg=green
nmap <silent> <Leader>l <Plug>IndentGuidesToggle
" }}}

" Gitgutter Settings {{{
let g:gitgutter_enabled            = 1
let g:gitgutter_signs              = 1
let g:gitgutter_highlight_lines    = 0
let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime           = 0
let g:gitgutter_eager              = 0
let g:gitgutter_max_signs          = 500
" }}}

" Rainbow Parenthesis {{{
let g:rbpt_colorpairs = [
  \ ['brown',       'RoyalBlue3'],
  \ ['Darkblue',    'SeaGreen3'],
  \ ['darkgray',    'DarkOrchid3'],
  \ ['darkgreen',   'firebrick3'],
  \ ['darkcyan',    'RoyalBlue3'],
  \ ['darkred',     'SeaGreen3'],
  \ ['darkmagenta', 'DarkOrchid3'],
  \ ['brown',       'firebrick3'],
  \ ['gray',        'RoyalBlue3'],
  \ ['black',       'SeaGreen3'],
  \ ['darkmagenta', 'DarkOrchid3'],
  \ ['Darkblue',    'firebrick3'],
  \ ['darkgreen',   'RoyalBlue3'],
  \ ['darkcyan',    'SeaGreen3'],
  \ ['darkred',     'DarkOrchid3'],
  \ ['red',         'firebrick3'],
  \ ]
" }}}
"
" Custom Functions {{{
function! StripTrailingWhitespace()
  if !&binary && &modifiable && &filetype != 'diff'
    let l:winview = winsaveview()
    %s/\s\+$//e
    let @/=''
    call winrestview(l:winview)
  endif
endfunction
" }}}
" Quoc Hung Le's .vimrc

" General {{{
" Load Plugins
if filereadable(expand('~/.vimrc.bundles'))
  source ~/.vimrc.bundles
endif

syntax enable       " Set syntax on by default
set termguicolors   " Using True Colors
set background=dark " Set Background depends on time

" Gruvbox Settings
colorscheme gruvbox " A dark Vim color scheme inspired by Atom's One Dark syntax theme.
let g:gruvbox_bold=1
let g:gruvbox_italic=1
let g:gruvbox_underline=1
let g:gruvbox_undercurl=1
let g:gruvbox_termcolors=256
let g:gruvbox_contrast_dark='soft'
let g:gruvbox_contrast_light='hard'

" Enable using true color in Neovim
" For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
if (has('nvim'))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" Render all comments in italic
highlight Comment gui=italic

" Special highlighting for HTML
" HTML arguments such as id, class, attribute
highlight htmlArg gui=italic
highlight xmlAttrib gui=italic

" HTML title
highlight htmlTitle gui=italic
" HTML anchor
highlight htmlLink gui=italic

" Special highlighting for Javascript
" Identifier
highlight javaScriptIdentifier gui=italic
" This keyword
highlight jsThis gui=italic
" Undefined keyword
highlight jsUndefined gui=italic
" Reserved words
highlight javaScriptReserved gui=italic
" Null
highlight javaScriptNull gui=italic
" Numbers
highlight javaScriptNumber gui=italic
" Function Arguments
highlight javaScriptFuncArg gui=italic
" Function Keyword
highlight javaScriptFuncKeyword gui=italic

set autowrite         " Automatically :write before running commands
set backspace=2       " Make the backspace work like in most other programs
set binary            " Don’t add empty newlines at the end of files
set clipboard=unnamed " Use the OS clipboard by default
set diffopt+=vertical " Always use vertical diffs
" set esckeys           " Allow cursor keys in insert mode
set hidden            " Hide files with unwritten changes instead of closing them
set history=500       " Keep 500 lines of command line history
set lazyredraw        " Don't redraw screen when running macros.
set nobackup          " Do not backup
set noendofline       " No end of line
set noerrorbells      " Disable error bells
set nostartofline     " Don’t reset cursor to start of line when moving around.
set noswapfile        " Stop vim from creating automatic backup ..
set novisualbell      " Do not show visual bell
set nowritebackup     " Do not write backup
set ruler             " Show the cursor position all the time
set scrolloff=10      " Keep at least 10 lines below cursor
set shortmess=atI     " Don’t show the intro message when starting Vim
set showcmd           " Show command in bottom bar
set showmatch         " Show matching brackets.
set showmode          " Show the current mode
set timeoutlen=500    " Set keypress timeout
set title             " Show the filename in the window titlebar
set ttyfast           " Optimize for fast terminal connections
set updatetime=300    " You will have bad experience for diagnostic messages when it's default 4000.
" }}}

" Presentation {{{
filetype indent on " Turn on indent based on filetype
filetype plugin on " Enable plugins based on filetype
set autoindent     " Auto indent
set cursorline     " Highlight current line
set expandtab      " Expand tabs into spaces.
set laststatus=2   " Always display status line
set linebreak      " Wrap lines at convenient points
set modeline       " Enable modeline
set modelines=1
set nojoinspaces   " Use one space, not two, after punctuation.
set number         " Show line number
set numberwidth=5  " Number column width
set relativenumber " Set relative number by default
set scrolloff=10   " Keep at least 5 lines above & below cursor position
set selection=old  " Do not select the end of line.
set shiftround     " Shift to the next round tab stop. Aka When at 3 spaces, hit >> to go to 4, not 5.
set shiftwidth=2   " Set auto indent spacing.
set showbreak=a    " Set break character
set smartindent    " Smart Indent
set smarttab       " Insert spaces in front of lines.
set softtabstop=2  " Set soft tabs equal to 2 spaces.
set tabstop=2      " Set tab to equal 2 spaces.
set textwidth=81   " Maximum line width before wrapping.
set wrap           " Wrap text.
set cmdheight=2    " Better display for messages
set shortmess+=c      " don't give |ins-completion-menu| messages.
set signcolumn=yes    " always show signcolumns

" Set Line Number Width
set numberwidth=3

" Invisible Characters
set list               " Show invisible characters.
set listchars=tab:▸\   " Tab
set listchars+=eol:¬   " End of line
set listchars+=trail:· " Invisible space"
set listchars+=extends:»
set listchars+=precedes:«

" Better Whitespace Settings
highlight ExtraWhitespace ctermbg=red guibg=#e74c3c

" Set the color of non text characters to be the same as the background color
highlight NonText guifg=bg

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey ctermfg=5

" Highlight > 81 character range
let &colorcolumn=join(range(81,999),',')
let &colorcolumn='80,'.join(range(120,999),',')

" Highlight SignColum (Gutter)
highlight SignColumn ctermfg=bg ctermbg=NONE
highlight SignColumn guifg=red guibg=NONE

" Highlight the status line
highlight StatusLine ctermfg=darkblue ctermbg=black
highlight StatusLine ctermfg=darkblue ctermbg=black

" Hide tilde signs on blank lines
highlight! EndOfBuffer ctermbg=bg ctermfg=bg guibg=bg guifg=bg

" Vertical Split
set fillchars+=vert:│
highlight VertSplit guifg=#444444 guibg=NONE

" Line highlights
highlight GitGutterAdd ctermfg=green ctermbg=NONE
highlight GitGutterAdd guifg=#27ae60 guibg=NONE
" }}}

" Autocompletion {{{
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" }}}

" Keymapping {{{
" Set leader key
let g:mapleader=','

" Quickly source .vimrc
nnoremap <leader>r :source $MYVIMRC<CR>

" Quickly open .vimrc in new tab
nnoremap <leader>v :tabedit ~/.vimrc<CR>

" Quickly open .vimrc.bundles in new tab
nnoremap <leader>b :tabedit ~/.vimrc.bundles<CR>

" Quickly quit editting without save
nnoremap <leader>q :q!<CR>

" Quickly open .tmux.conf in new tab
nnoremap <leader>mx :tabedit ~/.tmux.conf<CR>

" Start tracking Vim session
nnoremap <leader>o :Obsession<CR>

" Quickly put double quotes around a word
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel

" Quickly replace all tabs with spaces
nnoremap <leader><Space> :%s/<Tab>/  /g<CR>

" Saves the file (handling the permission-denied error)
cnoremap w!! w !sudo tee % >/dev/null

" Delete current line n insert mode
inoremap <c-d> <esc>ddi

" Uppercase current word
inoremap <c-u> <esc>viwUA

" Map JK to ESC
inoremap jk <esc>

" Disable Esp Key
inoremap <esc> <nop>

" Use HJKL instead of arrow keys
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>

" Make j and k move to the next row, not file line
nnoremap j gj
nnoremap k gk

" Select all text
nnoremap vA ggVG

" Home & End should be placed next to each other
nnoremap - $

" Quick Save
nnoremap <S-s> :w<CR>

" Don't lose selection when shifting sidewards
" xnoremap <  <gv
" xnoremap >  >gv

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" Yank to end of line
nnoremap Y y$

"Delete to the end of line
nnoremap D d$

" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

" Toggle Relative Number
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Toggle Wrap Text
nnoremap <silent> <leader>w :set wrap!<CR>

" Toggle Paste
nnoremap <silent> <leader>p :set paste!<CR>

" CTags
nnoremap <F5> :!ctags -R<CR>

" Operator-Pending Mappings

" Inside next paranthesis
onoremap in( :<c-u>normal! f(vi(<cr>

" Inside prev paranthesis
onoremap il( :<c-u>normal! F)vi(<cr>

" Quickly add empty lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" Markdown Settings
vnoremap <D-j> gj
vnoremap <D-k> gk
vnoremap <D-4> g$
vnoremap <D-6> g^
vnoremap <D-0> g^
nnoremap <D-j> gj
nnoremap <D-k> gk
nnoremap <D-4> g$
nnoremap <D-6> g^
nnoremap <D-0> g^
" }}}

" Tab Navigation {{{
" Easily create a new tab.
noremap <Leader>tN :tabnew<CR>

" Easily close a tab.
noremap <Leader>tc :tabclose<CR>

" Easily move a tab.
noremap <Leader>tm :tabmove<CR>

" Easily go to next tab.
noremap <Leader>tn :tabnext<CR>

" Easily go to previous tab.
noremap <Leader>tp :tabprevious<CR>

" Switch between tabs
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nnoremap <Leader>tl :exe "tabn ".g:lasttab<CR>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
noremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" }}}

" UI Layouts & Windows Management {{{
"
" Creating splits with empty buffers in all directions
nnoremap <Leader>hn :leftabove  vnew<CR>
nnoremap <Leader>ln :rightbelow vnew<CR>
nnoremap <Leader>kn :leftabove  new<CR>
nnoremap <Leader>jn :rightbelow new<CR>

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quickly resize windows
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 4/3)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 3/4)<CR>

" Move between splits faster without the prefix key
" Use ctrl-[hjkl] to select the active split!
nmap <C-j> <C-W><C-j>
nmap <C-k> <C-W><C-k>
nmap <C-l> <C-W><C-l>
nmap <C-h> <C-W><C-h>
" Make tmux navigator works in NeoVim
" https://github.com/christoomey/vim-tmux-navigator#it-doesnt-work-in-neovim-specifically-c-h
" A more complete and less-hacky solution would be to update the incorrect
" terminfo entry that is part of the problem on OS X (and some Linux
" distributions) as described in this comment: https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
nmap <silent> <BS> :TmuxNavigateLeft<cr>
" }}}

" Search {{{
set hlsearch                             " Enable Highlight Search
set incsearch                            " Highlight while search
set ignorecase                           " Case Insensitivity Pattern Matching
set smartcase                            " Overrides ignorecase if pattern contains upcase
set grepprg=ack\ --nogroup\ --column\ $* " Make grep use ack instead
set grepformat=%f:%l:%c:%m

" Keep search results at the center of screen
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Disable highlight when <leader><cr> is pressed
noremap <silent> <leader><cr> :noh<cr>
" }}}

" Foldings {{{
set foldcolumn=2      " Set Fold Column Width
set foldenable        " Enable folding.
set foldlevelstart=99 " Open most folds by default
set foldmethod=manual " Create folds based on syntax
set foldnestmax=10    " Do not nest more than 5 folds.
set viewoptions=folds " Remember folds

let javaScript_fold = 1

" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za

" Highlight Fold Column
highlight FoldColumn ctermfg=darkblue ctermbg=black
highlight FoldColumn guifg=#689d6a guibg=NONE

" Highlight Folded Line
highlight Folded ctermbg=blue ctermfg=white
highlight Folded guibg=#689d6a guifg=white

" }}}

" Functions {{{
  function StripUnwantedCharacters()
    execute "%s///g"
  endfunction
" }}}

" Autocommand {{{
augroup general
  autocmd!

  " Show cursorline only in active windows & not in inser mode
  autocmd InsertLeave,WinEnter * set cursorline
  autocmd InsertEnter,WinLeave * set nocursorline

  " Enable file type detection
  autocmd BufWinLeave * silent! mkview
  autocmd BufWinEnter * silent! loadview

  " Resize splits when the window is resized.
  autocmd VimResized * exe "normal! \<c-w>="

" Strip trailing whitespace on save.
  autocmd BufWritePre,FileWritePre,FileAppendPre,FilterWritePre * StripWhitespace
  " autocmd BufWritePre,FileWritePre,FileAppendPre,FilterWritePre * StripUnwantedCharacters

  autocmd TabLeave * let g:lasttab = tabpagenr()
augroup END

augroup ft_json
  autocmd!

  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
  autocmd BufNewFile,BufRead *.js setfiletype javascript syntax=javascript
augroup END

augroup ft_vim
  autocmd!

  " Vim settings
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim setlocal foldlevelstart=0
  autocmd FileType vim setlocal foldlevel=0
augroup END

augroup ft_html_css_craft
  autocmd!
  " Use Emmet on HTML & CSS only
  autocmd FileType html,css EmmetInstall
augroup END

augroup ft_md
  autocmd!

  " Set filetype as markdown
  autocmd BufNewFile,BufReadPost *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown

  autocmd FileType markdown setlocal spell             " Spellchecking for Markdown
  autocmd FileType markdown setlocal wrap              " Enable text to fit within windows width
  autocmd FileType markdown setlocal linebreak         " Avoid wrap breaking words
  autocmd FileType markdown setlocal nolist            " Make sure linebreak work as expected
  autocmd FileType markdown setlocal showbreak=↳\      " Know where we're
  autocmd FileType markdown setlocal textwidth=0       " Remove text width limit
  autocmd FileType markdown setlocal foldmethod=manual " Manually fold

  " Parse content between the ---s as comment. Make YML files look better
  autocmd BufNewFile,BufReadPost,BufWrite *.{md,mdown,mkd,mkdn,markdown,mdwn} syntax match Comment /\%^---\_.\{-}---$/
augroup END
" }}}

" Cursor configuration {{{
" ====================================================================
" Change cursor style dependent on mode
if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
elseif empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  if v:version >= 800
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  endif
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  if v:version >= 800
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  endif
endif

" }}}

" Wildmenu {{{
set wildmenu         " Enhance command-line completion
set wildignorecase   " Ignore casing
set wildchar=<Tab>   " Enable completion on tab.

" Ignore compiled files
set wildignore=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" Highlight Wildmenu Selected Item
highlight WildMenu ctermfg=white ctermbg=green
highlight WildMenu guifg=white guibg=#27ae60

if has('nvim') || v:version >= 800
  set completeopt+=noselect
endif
" }}}

" Misc {{{
"
"Turn off Vim's spell as it highlights the same words.
set nospell

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Pressing ,ss will toggle spell checking
noremap <leader>ss :setlocal spell!<cr>

" Mouse Settings
if has('mouse')
  set mouse=a " Enable mouse everywhere.
  set mousemodel=popup_setpos  " Show a pop-up for right-click.
  set mousehide " Hide mouse while typing.
endif
" }}}

" Plugin Settings

" Prettier{{{

" Disable auto formatting of files that have "@format" tag
let g:prettier#autoformat = 0

" The command `:Prettier` by default is synchronous but can also be forced async
let g:prettier#exec_cmd_async = 1

" max line lengh that prettier will wrap on
let g:prettier#config#print_width = 80

" number of spaces per indentation level
let g:prettier#config#tab_width = 2

" use tabs over spaces
let g:prettier#config#use_tabs = 'false'

" print semicolons
let g:prettier#config#semi = 'true'

" single quotes over double quotes
let g:prettier#config#single_quote = 'true'

" print spaces between brackets
let g:prettier#config#bracket_spacing = 'true'

" put > on the last line instead of new line
let g:prettier#config#jsx_bracket_same_line = 'true'

" none|es5|all
let g:prettier#config#trailing_comma = 'all'

" Parsing errors will open the quickfix
let g:prettier#quickfix_enabled = 1

" Auto focus on the quickfix
let g:prettier#quickfix_auto_focus = 0

"}}}

" ALE  {{{
" Global Variables
" ======================================
" Keep the sign gutter open at all times
let g:ale_sign_column_always = 1

" Display waring & erros in airline
let g:airline#extensions#ale#enabled = 1
let g:ale_statusline_format = ['E:%d', 'W:%d', '✓']

" Error Message Format
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" Custom Characters
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '⚠'
let g:ale_sign_warning = '--'
let g:ale_warn_about_trailing_whitespace = 1

" Use the quickfix list instead of the loclist
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" Disable lint while typing to save battery life
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_delay = 200

" Linter Variables
" ======================================
" Setup linters
let g:ale_linters = {
  \ 'bash':       ['shellcheck'],
  \ 'javascript': ['prettier', 'eslint', 'flow'],
  \ 'typescript': ['prettier', 'eslint', 'tslint'],
  \ 'ruby':       ['rubocop'],
  \ 'markdown':   ['mdl'],
  \ 'php':        ['phpcs'],
  \ 'css':        ['csslint'],
  \ 'html':       ['htmlhint'],
  \ 'json':       ['jsonlint'],
  \ 'python':     ['flake8'],
  \ 'sass':       ['sasslint'],
  \ 'scss':       ['scsslint'],
  \ 'viml':       ['vint'],
  \ 'yml':        ['yamllint'],
\ }

let g:ale_fixers = {
\ 'javascript': ['eslint', 'flow'],
\ 'typescript': ['eslint', 'tslint'],
\}

" }}}

" Coc.nvim {{{
inoremap <silent><expr> <TAB>
  \ pumvisible() ? coc#_select_confirm() :
  \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-k>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-j>'

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" }}}

" Easy Motion {{{
" This setting makes EasyMotion work similarly to Vim's smartcase option for global searches
let g:EasyMotion_smartcase = 1

" With this option set, v will match both v and V, but V will match V only. Default: 0. Works with US layout
let g:EasyMotion_use_smartsign_us = 1

" Replace default Vim search with EasyMotion n-character search motion
nmap  / <Plug>(easymotion-sn)

" }}}

" Easy Align {{{
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" Emmet Vim {{{
let g:user_emmet_mode='a'           " Only enable Insert mode functions.
let g:user_emmet_install_global = 1 " Enable just for html/css
let g:user_emmet_leader_key='<Tab>' " Using Tab to expand
" }}}

" FZF Settings {{{
" Fuzzy-find Files
noremap  <C-p> :Files<cr>
nnoremap <C-p> :Files<cr>

" Line matching
inoremap <c-x><c-l> <plug>(fzf-complete-line)

" Setup  window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }

" This is the default extra key bindings
let g:fzf_action = { 'enter': 'tab split'}

" Customize fzf colors to match your color scheme
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" File preview using Highlight
let g:fzf_files_options =
  \ '--preview "(highlight -O ansi {} || cat {}) 2> /dev/null | head -'.&lines.'"'

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
"
" }}}

" Gitgutter {{{
set signcolumn=yes
let g:gitgutter_enabled            = 1
let g:gitgutter_signs              = 1
let g:gitgutter_highlight_lines    = 0
let g:gitgutter_realtime           = 1
let g:gitgutter_eager              = 0
let g:gitgutter_max_signs          = 500
" }}}

" Indent Guide {{{
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_default_mapping = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_exclude_filetypes = ['help', 'startify', 'man', 'rogue']
" }}}

" NERDTree {{{
nnoremap <Leader>n :NERDTreeToggle<CR>
" Map Leader F to show file in NERDTree
nnoremap <Leader>f :NERDTreeFind<CR>
let g:NERDTreeWinSize=30
let g:NERDTreeShowHidden=0
let g:NERDTreeShowLineNumbers=0
let g:NERDTreeMinimalUI=1
let g:NERDTreeCascadeSingleChildDir=0
let g:NERDTreeHighlightCursorline=1
" let g:NERDTreeChDirMode=0
" }}}

" NERDTree Tabs {{{

" Map Leader t to toggle NERDTree
nnoremap <Leader>t :NERDTreeTabsToggle<CR>

" Run NERDTreeTabs on console vim startup
let g:nerdtree_tabs_open_on_console_startup = 2
"
" Automatically find and select currently opened file in NERDTree.
let g:nerdtree_tabs_autofind = 0
"
" On startup, focus NERDTree if opening a directory, focus file if opening a file. (When set to 2, always focus file window after startup).
let g:nerdtree_tabs_smart_startup_focus = 1
"
" Open NERDTree on new tab creation (if NERDTree was globally opened by :NERDTreeTabsToggle)
let g:nerdtree_tabs_open_on_new_tab = 1

" When switching into a tab, make sure that focus is on the file window, not in the NERDTree window.
let g:nerdtree_tabs_focus_on_files = 1

" }}}

" NERDTres File highlighting {{{
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" HTML
call NERDTreeHighlightFile('jade', 'green', 'none', '#719c6e', 'none')
call NERDTreeHighlightFile('html', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('haml', 'green', 'none', '#719c6e', 'none')

" Shell
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', 'none')

" Programming Languages
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', 'none')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', 'none')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', 'none')
call NERDTreeHighlightFile('rb', 'Magenta', 'none', '#ff00ff', 'none')

" Systems
call NERDTreeHighlightFile('ini', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('config', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('conf', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('yml', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', 'none')

" Text
call NERDTreeHighlightFile('json', 'yellow', 'none', '#f0f0f0', 'none')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', 'none')

" CSS
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', 'none')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', 'none')
" }}}

" NERD Commenter {{{
let g:NERDSpaceDelims = 1            " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs = 1        " Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left'      " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDAltDelims_java = 1         " Set a language to use its alternate delimiters by default
let g:NERDCommentEmptyLines = 1      " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } } " Add your own custom formats or override the defaults
" }}}

" Rainbow Parenthesis {{{
let g:rbpt_colorpairs = [
  \ ['brown',       'RoyalBlue3'],
  \ ['Darkblue',    'SeaGreen3'],
  \ ['darkgray',    'DarkOrchid3'],
  \ ['darkgreen',   'firebrick3'],
  \ ['darkcyan',    'RoyalBlue3'],
  \ ['darkred',     'SeaGreen3'],
  \ ['darkmagenta', 'DarkOrchid3'],
  \ ['brown',       'firebrick3'],
  \ ['gray',        'RoyalBlue3'],
  \ ['black',       'SeaGreen3'],
  \ ['darkmagenta', 'DarkOrchid3'],
  \ ['Darkblue',    'firebrick3'],
  \ ['darkgreen',   'RoyalBlue3'],
  \ ['darkcyan',    'SeaGreen3'],
  \ ['darkred',     'DarkOrchid3'],
  \ ['red',         'firebrick3'],
  \ ]
" }}}

" SplitJoin {{{
nnoremap <Leader>j :SplitjoinJoin<CR>
nnoremap <Leader>s :SplitjoinSplit<CR>
" }}}

"Vim Airline {{{
let g:airline#extensions#syntastic#enabled        = 0         " Disable syntastic integration
let g:airline#extensions#tabline#enabled          = 1         " Enable Tab line
let g:airline#extensions#tabline#fnamemod         = ':t'      " Show just the filename in tabline
let g:airline#extensions#tabline#show_buffers     = 0         " Do not show buffer in tab bar
let g:airline#extensions#tabline#tab_nr_type      = 1         " Show splits and tab number in tab mode.
let g:airline#extensions#tmuxline#enabled         = 1         " Enable tmuxline integration >
let g:airline#extensions#wordcount#enabled        = 0         " Disbale words counter by default
let g:airline_powerline_fonts                     = 1         " Enable using powerline font
let g:airline_theme                               = 'gruvbox' " Set airline theme
let g:airline_section_warning                     = 1         " Disable warning section

" Integration with vim-obsession
let g:airline#extensions#obsession#enabled        = 1
let g:airline#extensions#obsession#indicator_text = '@'
" }}}

" Vim Fugitive {{{
" Fix broken syntax highlight in gitcommit files
" (https://github.com/tpope/vim-git/issues/12)
let g:fugitive_git_executable = 'LANG=en_US.UTF-8 git'

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gE :Gedit<space>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gR :Gread<space>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gW :Gwrite!<CR>
nnoremap <silent> <leader>gq :Gwq<CR>
nnoremap <silent> <leader>gQ :Gwq!<CR>

function! ReviewLastCommit()
  if exists('b:git_dir')
    Gtabedit HEAD^{}
    nnoremap <buffer> <silent> q :<C-U>bdelete<CR>
  else
    echo 'No git a git repository:' expand('%:p')
  endif
endfunction
nnoremap <silent> <leader>g` :call ReviewLastCommit()<CR>

augroup fugitiveSettings
  autocmd!
  autocmd FileType gitcommit setlocal nolist
  autocmd BufReadPost fugitive://* setlocal bufhidden=delete
augroup END
" }}}

" Vim Javascript {{{

" Setup used libraries
let g:used_javascript_libs = 'react, jquery, chai, underscore, lo-dash'

" Enables syntax highlighting for JSDocs.
let g:javascript_plugin_jsdoc = 1

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" Concealing characters
" let g:javascript_conceal_function       = 'ƒ'
" let g:javascript_conceal_null           = 'ø'
" let g:javascript_conceal_this           = '@'
" let g:javascript_conceal_return         = '⇚'
" let g:javascript_conceal_undefined      = '¿'
" let g:javascript_conceal_NaN            = 'ℕ'
" let g:javascript_conceal_prototype      = '¶'
" let g:javascript_conceal_static         = '•'
" let g:javascript_conceal_super          = 'Ω'
" let g:javascript_conceal_arrow_function = '⇒'
" }}}

" Vim Move {{{
let g:move_map_keys = 0
nnoremap <S-k> <Plug>MoveLineUp
nnoremap <S-j> <Plug>MoveLineDown
vnoremap <S-k> <Plug>MoveBlockUp
vnoremap <S-j> <Plug>MoveBlockDown
" }}}

" vim:foldmethod=marker:foldlevel=0
" Load Vim bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif


" Keymapping
" ------------------------------------------------------------------------- {{{

" Set leader key
let mapleader=","

" Prevent using arrow key
"nnoremap <Left>  :echoe "Use h"<CR>
"nnoremap <Right> :echoe "Use l"<CR>
"nnoremap <Up>    :echoe "Use k"<CR>
"nnoremap <Down>  :echoe "Use j"<CR>

" Custom Shortcuts
" ------------------------------------------------------------------------- {{{

" Quickly reload .vimrc
map <leader>vr :source ~/.vimrc<CR>

" Quickly open .vimrc in new tab
map <leader>vc :tabedit ~/.vimrc<CR>

" Quickly open .vimrc.bundles in new tab
map <leader>vb :tabedit ~/.vimrc.bundles<CR>

" Copy all content of a file
map <leader>co ggVG"*y

" Quick Save
nmap <silent> <S-s> :w!<CR>

" Map Ctrl b to toggle BuffergatorToggle
nmap <silent> <C-b> :BuffergatorToggle<CR>

" Remove Sarch Hightlight
nmap <silent> <S-h> :nohl<CR>

" Toggle Relative Number
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Toggle Wrap Text
nnoremap <silent> <leader>w :set wrap!<CR>

" Toggle Paste
nnoremap <silent> <leader>p :set paste!<CR>

" CTags
nnoremap <F5> :!ctags -R<CR>

" General Settings
" ------------------------------------------------------------------------- {{{
set history=500       " Keep 500 lines of command line history
set ruler             " Show the cursor position all the time
set backspace=2       " Make the backspace work like in most other programs
set clipboard=unnamed " Use the OS clipboard by default
set timeoutlen=500    " Set keypress timeout
set shiftround        " When at 3 spaces, hit >> to go to 4, not 5.
set lazyredraw        " Don't redraw screen when running macros.
set esckeys           " Allow cursor keys in insert mode
set ttyfast           " Optimize for fast terminal connections
set binary            " Don’t add empty newlines at the end of files
set showmatch         " Show matching brackets.
set noerrorbells      " Disable error bells
set nostartofline     " Don’t reset cursor to start of line when moving around.
set diffopt+=vertical " Always use vertical diffs
set autowrite         " Automatically :write before running commands
set scrolloff=10      " Keep at least 4 lines below cursor
set shortmess=atI     " Don’t show the intro message when starting Vim
set showmode          " Show the current mode
set noeol             " No end of line
set title             " Show the filename in the window titlebar
set noswapfile        " Stop vim from creating automatic backup ..
set nobackup
set nowb

" Presentation
" ------------------------------------------------------------------------- {{{
set cursorline      " Highlight current line
set number          " Show line number
set relativenumber  " Set relative number by default
set linebreak       " Wrap lines at convenient points
set wrap            " Wrap text.
set textwidth=80    " Maximum line width before wrapping.
set background=dark " I prefer using dark background while writing code
set laststatus=2    " Always display status line
set smartindent     " Smart Indent

" Whitespace
" ------------------------------------------------------------------------- {{{
set selection=old " Do not select the end of line.
set expandtab     " Expand tabs into spaces.
set tabstop=2     " Set tab to equal 4 spaces.
set softtabstop=2 " Set soft tabs equal to 4 spaces.
set shiftwidth=2  " Set auto indent spacing.
set shiftround    " Shift to the next round tab stop.
set smarttab      " Insert spaces in front of lines.

" Search & Navigation
" ------------------------------------------------------------------------- {{{
set hlsearch                             " Enable Highlight Search
set incsearch                            " Highligt while search
set ignorecase                           " Case Insensitivite Pattern Matching
set smartcase                            " Overrides ignorecase if pattern contains upcase
set grepprg=ack\ --nogroup\ --column\ $* " Make grep use ack instead
set grepformat=%f:%l:%c:%m

" Invisible Characters
" ------------------------------------------------------------------------- {{{
set nolist " Do not show invisible characters.
set listchars=tab:▸\ ,eol:¬,trail:⌴,extends:❯,precedes:❮ " List of characters to show instead of whitespace.

" Folding
" ------------------------------------------------------------------------- {{{
set foldenable        " Enable folding.
set foldmethod=indent " Syntax dictates folding.
set foldlevel=0       " Use a one level fold.
set foldnestmax=2     " Do not nest more than 2 folds.
set viewoptions=folds " Remember folds."

" Autocomplete
" ------------------------------------------------------------------------- {{{
set complete+=kspell " Autocomplete with dictionary words when spell check is on
set wildmenu         " Enhance command-line completion
set wildchar=<Tab>   " Enable completion on tab.

" Windows Mangements
" ------------------------------------------------------------------------- {{{

" Windows Split
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

filetype plugin indent on
syntax on "Set syntax on by default
colorscheme gotham "Favourite Colorsheme

" Highlight > 81 character range
let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(120,999),",")

"Vim Airline
let g:airline_powerline_fonts = 1
highlight SignColumn ctermbg=232 "Set gutter background to black
highlight StatusLine ctermfg=blue ctermbg=yellow "Highlight the status line

" Better Whitespace Settings
highlight ExtraWhitespace ctermbg=red
nmap <leader>tw  :ToggleWhitespace<CR>
nmap <leader>fw  :StripWhitespace<CR>

" Tab Navigation
" ------------------------------------------------------------------------- {{{

map <Leader>tt :tabnew<CR>          " Easily create a new tab.
map <Leader>tc :tabclose<CR>        " Easily close a tab.
noremap <Leader>tm :tabmove<CR>     " Easily move a tab.
noremap <Leader>tn :tabnext<CR>     " Easily go to next tab.
noremap <Leader>tp :tabprevious<CR> " Easily go to previous tab.

" Use + & - to adjust windows sizes
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>


" Auto Command
" ------------------------------------------------------------------------- {{{
if has("autocmd")
  " Enable file type detection
  filetype on
	au BufWinLeave * silent! mkview
	au BufWinEnter * silent! loadview

	" Resize splits when the window is resized.
	au VimResized * exe "normal! \<c-w>="

	" Strip trailing whitespace.
	au BufWritePre,FileWritePre,FileAppendPre,FilterWritePre *
			\ call StripTrailingWhitespace()

  " Treat .json files as .js
  au BufNewFile,BufRead *.json setfiletype json syntax=javascript

  " Treat .md files as Markdown
  au BufNewFile,BufRead *.md setlocal filetype=markdown

  " Automatically wrap at 80 characters for Markdown
  au BufRead,BufNewFile *.md setlocal textwidth=80

  " Enable spellchecking for Markdown
  au FileType markdown setlocal spell

  " Automatically wrap at 72 characters and spell check git commit messages
  au FileType gitcommit setlocal textwidth=72
  au FileType gitcommit setlocal spell

  " Remember last position in file
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Allow stylesheets to autocomplete hyphenated words
  au FileType css,scss,sass setlocal iskeyword+=-
endif


" Mouse Settings
" ------------------------------------------------------------------------- {{{

if has('mouse')
    " Enable mouse everywhere.
    set mouse=a

    " Show a pop-up for right-click.
    set mousemodel=popup_setpos

    " Hide mouse while typing.
    set mousehide
endif


" Plugin Settings
" ------------------------------------------------------------------------- {{{

" CtrP Search
" ------------------------------------ {{{
let g:ctrlp_max_files=0 " Remove limit files to search

" Bufferline
" ------------------------------------ {{{

let g:bufferline_echo = 1                  " Denotes whether bufferline should automatically echo to the command bar
let g:bufferline_active_buffer_left = '['  " The separator used on the left side of a buffer
let g:bufferline_active_buffer_right = ']' " The separator used on the right side of a buffer
let g:bufferline_modified = '+'            " The symbol to denote that a buffer is modified
let g:bufferline_show_bufnr = 1            " Denotes whether buffer numbers should be displayed
let g:SimpylFold_docstring_preview = 1     " SimpleFold
let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree', 'startify'] " Better Line Number

" Syntasitc
" ------------------------------------ {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_html_tidy_exec = 'tidy5'

" Easy Motion
" ------------------------------------ {{{
" Replace default Vim search with EasyMotion n-character search motion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1        " This setting makes EasyMotion work similarly to Vim's smartcase option for global searches
let g:EasyMotion_use_smartsign_us = 1 " With this option set, v will match both v and V, but V will match V only. Default: 0. Works with US layout

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" 2-character search motion
nmap <Leader><Leader>s <Plug>(easymotion-s2)
nmap <Leader><Leader>t <Plug>(easymotion-t2)

" Within line motion
" Every motion also has variants that are restricted to just the current line
" This can be helpful if you find the full search distracting or slows down vim.
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

" Easy Align
" ------------------------------------ {{{
""Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

"Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" XtermColorTable
nmap <silent> <S-c> :XtermColorTable<CR>

" NERDTree
" ------------------------------------ {{{
let g:NERDTreeWinSize = 31 " Set NERDTree Windows Size
nmap <silent> <C-t> :NERDTreeToggle<CR> " Mapp Ctrl t to toggle NERDTree
nmap <silent> <S-f> :NERDTreeFind<CR> " Mapp Shift F to show file in NERDTree

" NERDTress File highlighting
" ------------------------------------ {{{
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('haml', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('rb', 'Magenta', 'none', '#ff00ff', '#151515')

" Indent Guide
" ------------------------------------ {{{
hi IndentGuidesOdd  ctermbg=0
hi IndentGuidesEven ctermbg=232
nmap <silent> <Leader>l <Plug>IndentGuidesToggle
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size  = 1

" Gitgutter Settings
" ------------------------------------ {{{
let g:gitgutter_enabled            = 1
let g:gitgutter_signs              = 1
let g:gitgutter_highlight_lines    = 0
let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime           = 0
let g:gitgutter_eager              = 0
let g:gitgutter_max_signs          = 500

" Rainbow Parenthesis
" ------------------------------------ {{{
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" Custom Functions
" ------------------------------------------------------------------------- {{{
function! StripTrailingWhitespace()
    if !&binary && &modifiable && &filetype != 'diff'
        let l:winview = winsaveview()
        %s/\s\+$//e
        let @/=''
        call winrestview(l:winview)
    endif
endfunction